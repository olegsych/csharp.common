root = true

[*]
# Make git diff output clean and easy to read
trim_trailing_whitespace = true
insert_final_newline = true

# Don't attempt the impossible. Let Visual Studio use CRLF and rely on .gitattributes to normalize line endings.
end_of_line = unset

indent_style = space
indent_size = 4

[*.cs]

# Visual Studio 2019 editor settings for C#
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# Follow Beck's simple design rules https://www.martinfowler.com/bliki/BeckDesignRules.html
# to make the code reveal intent, without duplication and with fewest elements

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#this-and-me
# Don't use "this." unlesss it's required to disambiguate members.
dotnet_style_qualification_for_event = false:error
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_property = false:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#language-keywords
# Use built-in language types instead of framework type names
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#normalize-modifiers
# Use default order of modifiers
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error
# Make fields readonly explicitly to encourage making classes immutable
dotnet_style_readonly_field = true:error
# Don't specify redundant private accessibility, it's the C# default.
dotnet_style_require_accessibility_modifiers = never:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#parentheses-preferences
# Dont't add parentheses for clarity. C# operation precedence should be clear for simple expressions.
# Break up complex expressions into well-named variables and functions instead of adding parentheses.
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:error
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:error
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:error
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#expression-level-preferences
# Use inline initializers instead of separate initialization statements
dotnet_style_collection_initializer = true:suggestion
dotnet_style_object_initializer = true:suggestion
# Use tuple names instead of ItemX properties
dotnet_style_explicit_tuple_names = true:error
# Use inferred names for tuples and anonymous types. Name variables so that names can be inferred correctly.
dotnet_style_prefer_inferred_tuple_names = true:error
dotnet_style_prefer_inferred_anonymous_type_member_names = true:error
# Use auto properties instead of defining a backing field separately.
dotnet_style_prefer_auto_properties = true:error
# Use is null instead of ReferenceEquals because its more terse and just as readable.
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error
# Use ?: instead of if/else. Simplify code when if/else is needed for clarity.
dotnet_style_prefer_conditional_expression_over_assignment = true:error
dotnet_style_prefer_conditional_expression_over_return = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#null-checking-preferences
# Use .? instead of null checks
dotnet_style_null_propagation = true:error
# Use ?? instead of null checks
dotnet_style_coalesce_expression = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#implicit-and-explicit-types
# Use variable types reveal intent. Use var only when type is clearly specified in the statement.
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_for_built_in_types = false:error
csharp_style_var_elsewhere = false:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#expression-bodied-members
# Use expression-bodied members
csharp_style_expression_bodied_accessors = when_on_single_line:error
csharp_style_expression_bodied_constructors = when_on_single_line:error
csharp_style_expression_bodied_indexers = when_on_single_line:error
csharp_style_expression_bodied_methods = when_on_single_line:error
csharp_style_expression_bodied_operators = when_on_single_line:error
csharp_style_expression_bodied_properties = when_on_single_line:error
csharp_style_expression_bodied_lambdas = when_on_single_line:error
csharp_style_expression_bodied_local_functions = when_on_single_line:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#pattern-matching
# Use pattern matching
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_pattern_matching_over_is_with_cast_check = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#inlined-variable-declarations
# Declare out variables inline
csharp_style_inlined_variable_declaration = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?#c-expression-level-preferences
# Use default instead of default(TypeName)
csharp_prefer_simple_default_expression = true:suggestion

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#unused-value-preferences
# Use variable name to explain why value is unused.
csharp_style_unused_value_expression_statement_preference = unused_local_variable:error
csharp_style_unused_value_assignment_preference = unused_local_variable:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#miscellaneous-preferences
# Deconstruct tuples into variables to use <var> instead of <tuple>.<var>
csharp_style_deconstructed_variable_declaration = true:suggestion
# Use local functions instead of anonymous functions for better readability
csharp_style_pattern_local_over_anonymous_function = true:error
csharp_using_directive_placement = outside_namespace:error
csharp_prefer_static_local_function = true:error
csharp_prefer_simple_using_statement = true:error
csharp_style_prefer_switch_expression = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#c-null-checking-preferences
# Use variable ?? throw ... instead of if (variable == null) { throw ... }
csharp_style_throw_expression = true:error
# Use ?.Invoke instead of if (variable == null) { variable.Incoke(...) }
csharp_style_conditional_delegate_call = true:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions#code-block-preferences
# Don't use braces for single-line statements. When nesting control flow statements, extract method instead of adding braces.
csharp_prefer_braces = false:error

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions#organize-using-directives
# Place System namespaces first in the using blocks to move your own namespaces closer to your code
dotnet_sort_system_directives_first = true
# Don't separate using directives into multiple blocks. When the using list becomes too long, split the type instead.
dotnet_separate_import_directive_groups = false

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions#new-line-options
# Use K&R brace style instead of the Visual Studio default (Allman).
# https://en.wikipedia.org/wiki/Indentation_style#K&R
#
# A new line before an open brace helps to visually separate the preceding line from the code block after the brace.
# Don't use it for code blocks that should be short - conditional statements, properties, methods.
# If you feel your code is not readable without new line, focus on making it simpler.
# New line before an open brace is OK for types and namespaces. We don't expect them to be always short.
csharp_new_line_before_open_brace = types
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions#indentation-options
# Use indentation options consistent with K&R brace style
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions#spacing-options
# Don't use unnecessary spaces. Syntax-highligted C# is readable enough.
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = false
csharp_space_between_parentheses = false
csharp_space_around_binary_operators = before_and_after

csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false

csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

csharp_space_before_colon_in_inheritance_clause = false
csharp_space_after_colon_in_inheritance_clause = true

csharp_space_after_comma = true
csharp_space_before_comma = false

csharp_space_after_dot = false
csharp_space_before_dot = false

csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false

csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions#wrap-options
# Place variable declarations on separate lines. If you have too many variables, split the method.
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true
